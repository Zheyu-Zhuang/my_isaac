#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (2.7482837226418395, 1.1749390767403438, 1.7020330630172689)
                double3 target = (-0.5887615005806413, -0.28433754940903455, 0.22282518360648318)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./panda_only.usda"
            dictionary muteness = {
            }
        }
        dictionary physicsSettings = {
            int "/persistent/simulation/minFrameRate" = 60
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 156986
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    metersPerUnit = 1
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def "World"
{
    def Xform "Franka" (
        prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.1/Isaac/Robots/Franka/franka.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "panda_link0"
        {
        }

        over "panda_link1"
        {
        }

        over "panda_link2"
        {
            over "geometry"
            {
                float3 xformOp:rotateZYX = (0, 3.0185458e-7, 3.0185456e-7)
                float3 xformOp:scale = (1, 1.0000001, 1.0000001)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
            }
        }

        over "panda_link3"
        {
            over "geometry"
            {
                float3 xformOp:rotateZYX = (0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
            }
        }

        over "panda_link4"
        {
            over "geometry"
            {
                float3 xformOp:rotateZYX = (0, 6.0370934e-7, 0)
                float3 xformOp:scale = (1, 0.99999994, 0.99999994)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
            }
        }

        over "panda_link5"
        {
        }

        over "panda_link6"
        {
        }

        over "panda_link7"
        {
        }

        over "panda_link8"
        {
        }

        over "panda_hand"
        {
        }

        over "panda_leftfinger"
        {
        }

        over "panda_rightfinger"
        {
        }
    }

    def Camera "Camera"
    {
        float2 clippingRange = (1, 10000000)
        float focalLength = 24
        float focusDistance = 400
        custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -105.10791460577492)
        quatd xformOp:orient = (0.5887301405169046, 0.3869613331134805, 0.40073219105316715, 0.5857230227468542)
        double3 xformOp:scale = (4.550828604102689, 1.0000000000000002, 4.080209191235657)
        double3 xformOp:translate = (6.908551399134611, -0.11661189207626392, 4.0462103087266375)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "GroundPlane"
    {
        rel material:binding = </Looks/Carpet_Beige> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool primvars:doNotCastShadows = 0
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            rel material:binding = </World/GroundPlane/Asphalt> (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool primvars:doNotCastShadows = 0
            uniform token purpose = "guide"
        }
    }

    def DomeLight "DomeLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float colorTemperature = 5200
        float intensity = 500
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token texture:format = "latlong"
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 2.385651872262238)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

over "Render" (
    hide_in_stage_window = true
)
{
}

def Scope "Looks"
{
    def Material "Carpet_Beige"
    {
        token outputs:mdl:displacement.connect = </Looks/Carpet_Beige/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Carpet_Beige/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Carpet_Beige/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Carpet/Carpet_Beige.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "Carpet_Beige"
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

